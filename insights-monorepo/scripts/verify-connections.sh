#!/bin/bash

# Script para verificar conexiones a servicios externos

echo "üîç Verificando conexiones a servicios..."

# Cargar variables de entorno
source .env

# Funci√≥n para verificar si una variable est√° configurada
check_var() {
    local var_name=$1
    local var_value=$2
    
    if [[ "$var_value" == *"YOUR_"* ]] || [[ "$var_value" == *"..." ]] || [[ -z "$var_value" ]]; then
        echo "‚ùå $var_name: No configurado"
        return 1
    else
        echo "‚úÖ $var_name: Configurado"
        return 0
    fi
}

echo ""
echo "üìã Verificando variables de entorno:"
echo "=================================="

# Verificar variables cr√≠ticas
check_var "SUPABASE_URL" "$SUPABASE_URL"
check_var "SUPABASE_SERVICE_ROLE" "$SUPABASE_SERVICE_ROLE"
check_var "SUPABASE_ANON_KEY" "$SUPABASE_ANON_KEY"
check_var "GEMINI_API_KEY" "$GEMINI_API_KEY"

echo ""
echo "üîó Verificando conexiones:"
echo "========================="

# 1. Verificar Supabase
if check_var "SUPABASE_URL" "$SUPABASE_URL" && check_var "SUPABASE_SERVICE_ROLE" "$SUPABASE_SERVICE_ROLE"; then
    echo "üîç Probando conexi√≥n a Supabase..."
    SUPABASE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
        -H "apikey: $SUPABASE_SERVICE_ROLE" \
        "$SUPABASE_URL/rest/v1/")
    
    if [ "$SUPABASE_RESPONSE" = "200" ]; then
        echo "‚úÖ Supabase: Conexi√≥n exitosa"
    else
        echo "‚ùå Supabase: Error de conexi√≥n (HTTP $SUPABASE_RESPONSE)"
    fi
fi

# 2. Verificar Gemini
if check_var "GEMINI_API_KEY" "$GEMINI_API_KEY"; then
    echo "üîç Probando conexi√≥n a Gemini..."
    GEMINI_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Content-Type: application/json" \
        "https://generativelanguage.googleapis.com/v1beta/models?key=$GEMINI_API_KEY")
    
    if [ "$GEMINI_RESPONSE" = "200" ]; then
        echo "‚úÖ Gemini: Conexi√≥n exitosa"
    else
        echo "‚ùå Gemini: Error de conexi√≥n (HTTP $GEMINI_RESPONSE)"
    fi
fi

# 3. Verificar vLLM local
echo "üîç Probando conexi√≥n a vLLM local..."
VLLM_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
    "$VLLM_BASE_URL/models" 2>/dev/null)

if [ "$VLLM_RESPONSE" = "200" ]; then
    echo "‚úÖ vLLM local: Disponible"
else
    echo "‚ö†Ô∏è  vLLM local: No disponible (¬øDocker corriendo?)"
fi

# 4. Verificar Slack (opcional)
if check_var "SLACK_BOT_TOKEN" "$SLACK_BOT_TOKEN"; then
    echo "üîç Probando conexi√≥n a Slack..."
    SLACK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
        "https://slack.com/api/auth.test")
    
    if [ "$SLACK_RESPONSE" = "200" ]; then
        echo "‚úÖ Slack: Conexi√≥n exitosa"
    else
        echo "‚ùå Slack: Error de conexi√≥n (HTTP $SLACK_RESPONSE)"
    fi
fi

echo ""
echo "üìä Resumen:"
echo "==========="
echo "‚Ä¢ Supabase: $(check_var "SUPABASE_URL" "$SUPABASE_URL" && echo "‚úÖ" || echo "‚ùå")"
echo "‚Ä¢ Gemini: $(check_var "GEMINI_API_KEY" "$GEMINI_API_KEY" && echo "‚úÖ" || echo "‚ùå")"
echo "‚Ä¢ vLLM: $([ "$VLLM_RESPONSE" = "200" ] && echo "‚úÖ" || echo "‚ö†Ô∏è")"
echo "‚Ä¢ Slack: $(check_var "SLACK_BOT_TOKEN" "$SLACK_BOT_TOKEN" && echo "‚úÖ" || echo "‚ùå")"

echo ""
echo "üí° Pr√≥ximos pasos:"
echo "=================="
echo "1. Configura las variables faltantes en .env"
echo "2. Ejecuta 'docker compose up -d' para vLLM local"
echo "3. Ejecuta los seeds SQL en Supabase"
echo "4. Ejecuta 'npm run dev' para iniciar la API"
